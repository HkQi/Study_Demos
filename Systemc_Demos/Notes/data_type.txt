1> Value Holder
 a. 变量
 b. 信号
 c. 端口

 变量声明时必须指定类型和名称。
 信号可以用 sc_signal声明。信号被用于进程间的通信以及模块实例之间的连接。
 端口可以用 sc_in, sc_out, sc_inout之一声明，端口被用于指定与模块的接口。

 多维数组：
 int watch_in[4][8];
 sc_out<sc_uint<4> > addi[6];
 sc_signal<bool> mask[256][256];
 for (word=0; word<256; word++) {
        for (bit=0; bit<16; bit++) {
                mask[word][bit] = false;
        }
 }

2> 数据类型列表
 a. SystemC RTL 支持的 SystemC 数据类型
 sc_bit          // 0 ,1
 sc_bv<n>
 sc_logic        // 0, 1, X, Z
 sc_lv<n>
 sc_int<n>
 sc_uint<n>
 sc_bigint<n>
 sc_biguint<n>

 b. SystemC RTL 支持的 C++ 数据类型
 bool
 int
 unigned int
 long
 unsigned long
 signed char
 unsigned char
 short
 unsigned short
 enum
 struct

 etc.{
 /* sc_bit */
        sc_signal<sc_bit> flag;
        bool ready;
        flag = sc_bit("0");
        ready = ready & flag;
        if (read == flag);

 /* sc_bv<n> */
        sc_bv<8> ctrl_bus;
        sc_out<sc_bv<bv> > mult_out;
        sc_bv<4> mult;
        ctrl_bus = "10110000";
        mult = "1011"
        ctrl_bus = "10011"; // ctrl_bus = "00010011";
        ctrl_bus[5] = '0';
        ctrl_bus.range(0, 3) = ctrl_bus.range(7, 4); // 0<<7 1<<6 2<<5 3<<4
        mult = (ctrl_bus[0], ctrl_bus[0], ctrl_bus[0], ctrl_bus[1]);
        ctrl_bus[0] = ctrl_bus.and_reduce();
        ctrl_bus[1] = mult_or_reduce();
        
 /* 位选择符'[]'和range()方法只适用于变量，不能用于端口或者信号
  * 如果必须对端口或者信号进行为选择或者范围选择，则必须使用一个临时变量。
  */
        sc_signal<sc_bv<4> > dval;
        sc_in<sc_bv<8> > addr;
        sc_bv<4> var_dval;
        sc_bv<8> var_addr;
        sc_bit ready;

        var_addr = addr.read();
        ready = var_addr[2];

        var_dval = dval;
        var_dval.range(0, 2) = "011";
        dval = var_dval;
 /*
  * 对于位向量类型不允许进行算术运算。为了支持这种运算，位向量类型的操作数可以先
  * 被赋予一个有符号的或者无符号的整型变量。
  */
        sc_in<sc_bv<4> > pha1;
        sc_signal<sc_bv<6> > pha2;
        sc_uint<4> uint_pha1;
        sc_uint<6> uint_pha2;
        uint_pha1 = pha1;
        uint_pha2 = pha2;
        uint_pha2 = uint_pha2 - uint_pha1;
        pha2 = uint_pha2;

 /* 声明局部变量初始化 */
        sc_bv<8> all_ones("1");
        sc_bv<4> dtack(true);
        sc_bv<8> test_pattern = "01000001";
        sc_bv<4> wbus = "1001";

        cout << "The Val is " << var_addr << endl;

 /* sc_logic */
        // '0' SC_LOGIC_0
        // '1' SC_LOGIC_1
        // 'X' or 'x' SC_LOGIC_X
        // 'Z' or 'z' SC_LOGIC_Z
 /* 在使用赋值，相等和不想等 操作时, sc_logic可以和sc_bit类型的操作数相互混用 */
 /* 用to_bool方法可以将sc_logic类型转换成 bool类型 */
        sc_lv<4> data_bus;
        sc_signal<sc_lv<8> > counter_state;
        sc_out<sc_lv<16> > sensor;
        data_bus = "0011";
        sensor = "00110XXX01ZZ";
        data_bus = "0d14";
        sc_lv<8> dtack_read = "0xFE";
        sc_lv<4> coh_rd = "0xA";

 /* 同样不能直接对逻辑向量类型进行算术运算 */
  
 /* sc_int */
        sc_int<4> sel_addr, inc_pc;
        sc_int<8> opcode;
        sc_int<12> sel_date;
        #define N 7
        sc_in<sc_int<N+1> > cpu_control[4];
        sc_int<16> hr_reg_file[32];

        opcode = sel_addr + inc_pc; // 

        sel_data = -12;
        opcode = sel_data << 2;
        sel_addr = 6;
        inc_pc = -5;
        sel_addr = sel_addr ^ inc_pc;
        sel_data = 100;
        inc_pc = sel_data.range(3, 0);
        opcode.range(1, 0) = (sel_data[6], sel_data[7]);
        hr_reg_file[2] = concat(sel_data, sel_addr);
        bool stop_clk;
        bool start_clk;
        stop_clk = inc_pc.and_reduce();
        start_clk = hr_reg_file[15].xor_reduce();

 }

