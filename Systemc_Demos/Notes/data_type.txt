1> Value Holder
 a. 变量
 b. 信号
 c. 端口

 变量声明时必须指定类型和名称。
 信号可以用 sc_signal声明。信号被用于进程间的通信以及模块实例之间的连接。
 端口可以用 sc_in, sc_out, sc_inout之一声明，端口被用于指定与模块的接口。

 多维数组：
 int watch_in[4][8];
 sc_out<sc_uint<4> > addi[6];
 sc_signal<bool> mask[256][256];
 for (word=0; word<256; word++) {
        for (bit=0; bit<16; bit++) {
                mask[word][bit] = false;
        }
 }

2> 数据类型列表
 a. SystemC RTL 支持的 SystemC 数据类型
 sc_bit          // 0 ,1
 sc_bv<n>
 sc_logic        // 0, 1, X, Z
 sc_lv<n>
 sc_int<n>
 sc_uint<n>
 sc_bigint<n>
 sc_biguint<n>

 b. SystemC RTL 支持的 C++ 数据类型
 bool
 int
 unigned int
 long
 unsigned long
 signed char
 unsigned char
 short
 unsigned short
 enum
 struct

 etc.{
 /* sc_bit */
        sc_signal<sc_bit> flag;
        bool ready;
        flag = sc_bit("0");
        ready = ready & flag;
        if (read == flag);

 /* sc_bv<n> */
        sc_bv<8> ctrl_bus;
        sc_out<sc_bv<bv> > mult_out;
        sc_bv<4> mult;
        ctrl_bus = "10110000";
        mult = "1011"
        ctrl_bus = "10011"; // ctrl_bus = "00010011";
        ctrl_bus[5] = '0';
        ctrl_bus.range(0, 3) = ctrl_bus.range(7, 4); // 0<<7 1<<6 2<<5 3<<4
        mult = (ctrl_bus[0], ctrl_bus[0], ctrl_bus[0], ctrl_bus[1]);
        ctrl_bus[0] = ctrl_bus.and_reduce();
        ctrl_bus[1] = mult_or_reduce();
        
 /* 位选择符'[]'和range()方法只适用于变量，不能用于端口或者信号
  * 如果必须对端口或者信号进行为选择或者范围选择，则必须使用一个临时变量。
  */
        sc_signal<sc_bv<4> > dval;
        sc_in<sc_bv<8> > addr;
        sc_bv<4> var_dval;
        sc_bv<8> var_addr;
        sc_bit ready;

        var_addr = addr.read();
        ready = var_addr[2];

        var_dval = dval;
        var_dval.range(0, 2) = "011";
        dval = var_dval;
 /*
  * 对于位向量类型不允许进行算术运算。为了支持这种运算，位向量类型的操作数可以先
  * 被赋予一个有符号的或者无符号的整型变量。
  */
        sc_in<sc_bv<4> > pha1;
        sc_signal<sc_bv<6> > pha2;
        sc_uint<4> uint_pha1;
        sc_uint<6> uint_pha2;
        uint_pha1 = pha1;
        uint_pha2 = pha2;
        uint_pha2 = uint_pha2 - uint_pha1;
        pha2 = uint_pha2;

 /* 声明局部变量初始化 */
        sc_bv<8> all_ones("1");
        sc_bv<4> dtack(true);
        sc_bv<8> test_pattern = "01000001";
        sc_bv<4> wbus = "1001";

        cout << "The Val is " << var_addr << endl;

               
 }

